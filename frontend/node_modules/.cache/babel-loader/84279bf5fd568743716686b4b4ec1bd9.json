{"ast":null,"code":"var _jsxFileName = \"/Users/ErinsMac/Desktop/BadBank/bank/src/components/CreateAccount.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, status, useContext, useEffect } from \"react\";\nimport { Card, Form, Button, Row, Col, InputGroup } from 'react-bootstrap';\nimport { userContext } from \"../userContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DisabledButton = ({\n  text\n}) => {\n  return /*#__PURE__*/_jsxDEV(Button, {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    disabled: true,\n    children: [\" \", text, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 14\n  }, this);\n};\n\n_c = DisabledButton;\n\nconst CardForm = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.header\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      bgcolor: \"primary\",\n      header: props.header,\n      style: {\n        width: '18rem'\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_c2 = CardForm;\n\nfunction CreateAccount() {\n  _s();\n\n  const [validated, setValidated] = useState(false);\n  const [show, setShow] = useState(true);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [formChanged, setFormChanged] = useState(false);\n  const {\n    users,\n    setActiveUser\n  } = useContext(userContext);\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    users.push({\n      name,\n      email,\n      password,\n      balance: 0,\n      id: users.length\n    }); //setActiveUser(users[users.length-1]);\n\n    console.log(JSON.stringify(users));\n    setShow(false);\n    setValidated(true);\n  };\n\n  async function handleFormChange({\n    target: {\n      id,\n      value\n    }\n  }) {\n    id === 'name' ? setName(value) : id === 'email' ? setEmail(value) : setPassword(value);\n  }\n\n  useEffect(() => {\n    if (!name && !email && !password) {\n      setFormChanged(false);\n    } else {\n      setFormChanged(true);\n    }\n  }, [name, email, password]);\n  return (\n    /*#__PURE__*/\n\n    /* <Card\n         bgcolor=\"primary\"\n         header=\"Create Account\"\n         status={status}\n     >\n         <Card.Header> Create An Account </Card.Header>\n         <Card.Body>\n             <Form noValidate validated={validated} onChange={handleFormChange}>\n                 <Form.Group className=\"mb-3\" controlId='name'>\n                     <Form.Label> Enter Full Name </Form.Label>\n                     <Row>\n                         <Col>\n                             <Form.Control \n                                 required\n                                 type=\"text\"\n                                 placeholder=\"First name\" \n                             />\n                         </Col>\n                         <Col>\n                             <Form.Control \n                                 required\n                                 type=\"text\"\n                                 placeholder=\"Last name\"\n                             />\n                         </Col>\n                     </Row>\n                 </Form.Group>\n                  <Form.Group className=\"mb-3\">\n                     <Form.Label>Email address</Form.Label>\n                     <InputGroup hasValidation>\n                         <Form.Control \n                             type=\"email\" \n                             placeholder=\"email@address.com\"\n                             required \n                             id=\"email\"\n                         />\n                         <Form.Control.Feedback type=\"invalid\">\n                             Please enter a valid email address\n                         </Form.Control.Feedback>\n                     </InputGroup>\n                 </Form.Group>\n                  <Form.Group className=\"mb-3\" >\n                     <Form.Label>Password</Form.Label>\n                     <InputGroup hasValidation>\n                         <Form.Control \n                             type=\"password\" \n                             placeholder=\"password\"\n                             required \n                             id=\"password\"\n                         />\n                     </InputGroup>\n                     <Form.Text className=\"text-muted\">\n                         Strong passwords have at least 8 characters.\n                     </Form.Text>\n                 </Form.Group>\n             \n                 <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit}>\n                     Create Account\n                 </Button> \n                \n                 <Button as=\"input\" type=\"reset\" value=\"Reset\"/>\n             </Form>\n         </Card.Body>\n     </Card>*/\n    _jsxDEV(CardForm, {\n      header: \"Create Account\",\n      children: show ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TextInput, {\n          text: \"Name\",\n          type: \"input\",\n          value: name,\n          onChange: handleFormChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n          text: \"Email\",\n          type: \"input\",\n          value: email,\n          onChange: handleFormChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n          text: \"Password\",\n          type: \"password\",\n          value: password,\n          onChange: handleFormChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), formChanged ? /*#__PURE__*/_jsxDEV(SubmitButton, {\n          onClick: handleCreate,\n          text: \"Create account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 26\n        }, this) : /*#__PURE__*/_jsxDEV(DisabledButton, {\n          text: \"Create Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"emphasized\",\n          children: \"Success! Acount created.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n          onClick: clearForm,\n          text: \"Create another account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(CreateAccount, \"3ZwQGMfD/tK+Ux3qB0h1VAThJtk=\");\n\n_c3 = CreateAccount;\nexport default CreateAccount;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DisabledButton\");\n$RefreshReg$(_c2, \"CardForm\");\n$RefreshReg$(_c3, \"CreateAccount\");","map":{"version":3,"sources":["/Users/ErinsMac/Desktop/BadBank/bank/src/components/CreateAccount.js"],"names":["React","useState","status","useContext","useEffect","Card","Form","Button","Row","Col","InputGroup","userContext","DisabledButton","text","CardForm","props","header","width","children","CreateAccount","validated","setValidated","show","setShow","name","setName","email","setEmail","password","setPassword","formChanged","setFormChanged","users","setActiveUser","handleSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","push","balance","id","length","console","log","JSON","stringify","handleFormChange","target","value","handleCreate","clearForm"],"mappings":"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","sourcesContent":["\nimport { React, useState, status, useContext, useEffect} from \"react\";\nimport { Card, Form, Button, Row, Col, InputGroup } from 'react-bootstrap';\nimport { userContext } from \"../userContext\";\n\nconst DisabledButton = ({ text }) => {\n    return ( <Button type=\"submit\" className=\"btn btn-primary\" disabled > {text} </Button> );\n  }\n\n  const CardForm = (props) => {\n    return (\n      <>\n        <h1>{props.header}</h1>\n        <Card\n          bgcolor=\"primary\"\n          header={props.header}\n          style={{ width: '18rem' }}\n        >\n          {props.children}\n        </Card>\n      </>\n    );\n  }\n\nfunction CreateAccount(){\n    const [validated, setValidated] = useState(false);\n    const [show, setShow] = useState(true);\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [formChanged, setFormChanged] = useState(false);\n    const { users, setActiveUser } = useContext(userContext);\n\n    const handleSubmit = (event) => {\n        const form = event.currentTarget;\n\n        if(form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        users.push({name, email, password, balance:0, id:users.length});\n        //setActiveUser(users[users.length-1]);\n\n        console.log(JSON.stringify(users));\n        setShow(false);\n\n        setValidated(true);\n\n        \n    };\n\n    async function handleFormChange({ target:{id, value }}){\n        id === 'name' ? setName(value) : id === 'email' ? setEmail(value) : setPassword(value);\n    }\n\n    useEffect(()=>  {\n        if(!name && !email && !password){\n            setFormChanged(false);\n        } else {\n            setFormChanged(true);\n        }\n    }, [name, email, password]\n    )\n\n    return (\n       /* <Card\n            bgcolor=\"primary\"\n            header=\"Create Account\"\n            status={status}\n        >\n            <Card.Header> Create An Account </Card.Header>\n            <Card.Body>\n                <Form noValidate validated={validated} onChange={handleFormChange}>\n                    <Form.Group className=\"mb-3\" controlId='name'>\n                        <Form.Label> Enter Full Name </Form.Label>\n                        <Row>\n                            <Col>\n                                <Form.Control \n                                    required\n                                    type=\"text\"\n                                    placeholder=\"First name\" \n                                />\n                            </Col>\n                            <Col>\n                                <Form.Control \n                                    required\n                                    type=\"text\"\n                                    placeholder=\"Last name\"\n                                />\n                            </Col>\n                        </Row>\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label>Email address</Form.Label>\n                        <InputGroup hasValidation>\n                            <Form.Control \n                                type=\"email\" \n                                placeholder=\"email@address.com\"\n                                required \n                                id=\"email\"\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                Please enter a valid email address\n                            </Form.Control.Feedback>\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\" >\n                        <Form.Label>Password</Form.Label>\n                        <InputGroup hasValidation>\n                            <Form.Control \n                                type=\"password\" \n                                placeholder=\"password\"\n                                required \n                                id=\"password\"\n                            />\n                        </InputGroup>\n                        <Form.Text className=\"text-muted\">\n                            Strong passwords have at least 8 characters.\n                        </Form.Text>\n                    </Form.Group>\n                \n                    <Button variant=\"primary\" type=\"submit\" onClick={handleSubmit}>\n                        Create Account\n                    </Button> \n                   \n                    <Button as=\"input\" type=\"reset\" value=\"Reset\"/>\n                </Form>\n            </Card.Body>\n        </Card>*/\n\n        <CardForm header=\"Create Account\" >\n      {show ? (  \n        <>\n          <TextInput text=\"Name\" type=\"input\" value={name} onChange={handleFormChange} />\n          <TextInput text=\"Email\" type=\"input\" value={email} onChange={handleFormChange} />\n          <TextInput text=\"Password\" type=\"password\" value={password} onChange={handleFormChange}/>\n          {formChanged ? <SubmitButton onClick={handleCreate} text=\"Create account\" />:\n          <DisabledButton text=\"Create Account\" />}\n        </>\n      ):(\n        <>\n          <span className=\"emphasized\">Success! Acount created.</span>\n          <SubmitButton onClick={clearForm} text=\"Create another account\" />\n        </>\n      )}\n    </CardForm>\n    )\n}\n\nexport default CreateAccount;"]},"metadata":{},"sourceType":"module"}